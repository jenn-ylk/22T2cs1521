// q2 (^ means power in this case)

0x1    2    3    4
  0001 0010 0011 0100
  = 4 + 3 * 16^1 2 * 16^2 + 1 * 16^3 = 4660
0xffff
  1111
  (flipped) -> 0x0000
  (add one) -> 0x0001 (1)
  = -1
0x8000
  1000
  = -1 * 2^15 = -32768
  
  
// q3
100 = 64 + 32 + 4
(base 2) 
0000 0000 0110 0100
(hex)
0x0064
(octal)
000144


1000 = 2^9 + 2^8 + 2^7 + 2^6 + 2^5 + 2^3
1000 - 512 = 488
488 - 256 = 232
232 - 128 = 104
104 - 64 = 40
40 - 32 = 8

0000 0011 1110 1000
(hex)
0x03E8

-5
-(0000 0000 0000 0101) -> (1111 1111 1111 1011)
-100
find positive version
- representation of 100 is 0x0064
- subtract 1 -> 0x0063
0000 0000 0110 0011
- flip all bits
1111 1111 1001 1100



0 01111111 10000000000000000000000
sign = positive (0)
exp = 2^0 + 2^1 +... = 127 -> exp - 127 = 0
fraction = 0.5
(1 + 0.5) *2^0 = 1.5

0 01111110 00000000000000000000000
exp = 126
fraction = 0

(1) * 2^-1 = 0.5

0 10000000 01100000000000000000000
exp = 128
fraction = 0.25 + 0.125 = 0.375
(1.375) * 2 = 2.75


2.5 = 1.25 * 2^1
0 10000000 01000000000000000000000

0.375 = 1.5 * 2^-2
0 01111101 10000000000000000000000
